Animator component can directly reference its parameters:
anim = GetComponent<Animator>
anim.speed = 5;

KnockbackState should be a trigger in animation, transition from Any State, so that's 
how we avoid repeated transitions into the state from Any State in animator controller

Data structure for colliders will actually be a collection of scripts
Something like tree<IHittable>

IHittable would inherit from MonoBehaviour and have methods:
GetHit(damage);
OnDeath();
DoKnockback();
and Properties:
health
knockbackThreshold
Collider -> reference to the collider object that can be hit

LowPoly path is 21 x 21 meters

TinyHero has "weapon_r" which holds the sword and "weapon_l" to hold the shield
When instantiating hitbox for sword, use reference to "weapon_r" to get position

hitbox steps:

- Hitbox GameObject with generic collider and hitbox script 
    - Hitbox would be a child of weapons, projectiles, and enemies 
- Enemies own a hitbox 
- Player weapon owns a hitbox
    - Make weapons prefabs 
- Each Tower owns a unique projectile prefab, which owns a hitbox (need to figure out the dynamics of this)
- Player build state can't attack (carries Hammer) so can't activate hitbox
- Hitbox object is activated and deactivated during animations 
- Hitbox set of colliders reset on deactivation?
- Hitbox has properties of knockback and damage 
- Obstacles, Players, and Enemies must implement Hurtbox interface
    -Hurtbox has reference to Stats object 
- Hurtboxes register themselves with ColliderManager, which has a Dictionary<collider, hurtbox>

DistanceToLine function should use law of cosines and previous node as starting point for line?
All vectors start at origin so need a way to properly calculate path, unless we just use layermask on ground 

look more into chatGPT response:
High-level classes are typically responsible for coordinating the interactions between lower-level classes, and they provide the abstraction necessary to manage the complexity of the system